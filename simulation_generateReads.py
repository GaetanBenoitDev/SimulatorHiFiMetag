#pbsim simulation param: https://www.biorxiv.org/content/10.1101/2020.11.01.363887v1.supplementary-material
#python3 ./metasim_longreads.py ~/workspace/data/metasim_results/genomes/1334/ ~/workspace/data/overlap_test/genome2 ~/workspace/bin/simulator_longreads/pbsim-master 1 1 10 0.99 -readHeaderPrefix G2
#python3 ./metasim_longreads.py ~/workspace/data/simulation/strain_0.999999/input_simulation.txt ~/workspace/data/simulation/strain_0.999999/strains_2 ~/workspace/bin/simulator_longreads/pbsim-master 1 2 100 0.995

import os, glob, random, gzip, sys, argparse, shutil
from Bio import SeqIO
from Bio.SeqIO.FastaIO import SimpleFastaParser
#from Bio.SeqIO.FastaIO import FastaWriter
#import compute_coverage_ref_reads
#import create_assembly_graph
#import compute_coverage_gfa
#import compute_species_gfa_2

#import numpy as np
#from numpy.random import RandomState


def main(argv):
    
    parser = argparse.ArgumentParser()

    #parser.add_argument("strainsDir", help="")
    #parser.add_argument("inputStrains", help="File with one genome filename per line")
    parser.add_argument("inputAbundanceProfiles", help="File generated by simulation_generateAbundanceProfiles.py")
    parser.add_argument("outputDir", help="")
    parser.add_argument("pbsimDir", help="")
    #parser.add_argument("nbDatasets", help="")
    #parser.add_argument("nbStrains", help="")
    #parser.add_argument("maxCoverage", help="")
    parser.add_argument("readType", help="short | long")
    parser.add_argument("errorRate", help="")
    #parser.add_argument("readHeaderPrefix", help="")
    
    #parser.add_argument("csv", help="output unitig coverage file (.csv)")
    
    args = parser.parse_args()

    inputAbundanceProfiles = args.inputAbundanceProfiles
    outputDir = os.path.abspath(args.outputDir)
    pbsimDir = args.pbsimDir
    readType = args.readType
    errorRate = float(args.errorRate)
    #readHeaderPrefix = "" #args.readHeaderPrefix
    #if readHeaderPrefix is None: readHeaderPrefix = ""

    if not os.path.exists(outputDir): os.makedirs(outputDir)

    simulate_datasets(inputAbundanceProfiles, outputDir, pbsimDir, readType, errorRate)


def get_dataset_filename(output_dir, dataset_ID): return output_dir + "/" + "simulatedReads_" + str(dataset_ID) + ".fastq.gz"
def get_genome_name(genome_filename): return os.path.basename(genome_filename).split(".")[0]







def simulate_datasets(inputAbundanceProfiles, output_dir, simulation_software_dir, readType, errorRate):



    file_abundanceProfile_new = open(output_dir + "/abundance_profile.csv", "w")
    file_abundanceProfile_new.write("Dataset;Strain;Abundance\n")
        
    #dataset_files = {}
    simulation_dir = os.path.join(output_dir, "simulation_tmp")
    if not os.path.exists(simulation_dir): os.makedirs(simulation_dir)

    mdbgInputFilename = output_dir + "/input.txt"
    mdbgInputFile = open(mdbgInputFilename, "w")

    #output_fastq_filename = os.path.join(simulation_dir, "simulation_results.fastq")

    #simulate_reads_bpsim_contigs(genome_filename, coverage, output_fastq_file, simulation_dir)

    #output_fastq_file.close()

    #uniq_read_id = 0

    file_abundanceProfile = open(inputAbundanceProfiles, "r")
    file_abundanceProfile.readline()
    strainsIndex = {}
    strainIndex = 0

    datasetFilenames = set()
    for line in file_abundanceProfile:
        line = line.rstrip()
        fields = line.split(";")

        dataset_ID = fields[0]
        genome_filename = fields[1]
        coverage = float(fields[2])

        if not genome_filename in strainsIndex:
            strainsIndex[genome_filename] = strainIndex
            strainIndex += 1

        datasetFilename = get_dataset_filename(output_dir, dataset_ID)
        if os.path.exists(datasetFilename): os.remove(datasetFilename)

        datasetFilenames.add(datasetFilename)
        #print(datasetFilename)


    for filename in datasetFilenames:
        if readType == "short":
            filename = os.path.splitext(os.path.splitext(filename)[0])[0]
            mdbgInputFile.write(filename + "_1.fastq.gz\n")
            mdbgInputFile.write(filename + "_2.fastq.gz\n")
        elif readType == "long":
            mdbgInputFile.write(filename + "\n")

    mdbgInputFile.close()

    #exit(1)

    file_abundanceProfile.seek(0, 0)
    file_abundanceProfile.readline()

    for line in file_abundanceProfile:
        line = line.rstrip()
        fields = line.split(";")
        print(fields)

        dataset_ID = fields[0]
        genome_filename = fields[1]
        coverage = float(fields[2])
        #genome_size = compute_genome_size(genome_filename)
        #print(genome_size)

        strainID = strainsIndex[genome_filename]
        datasetFilename = get_dataset_filename(output_dir, dataset_ID)
        datasetFilenameTmp = simulation_dir + "/dataset.fastq"

        file_abundanceProfile_new.write(datasetFilename + ";" + genome_filename + ";" + str(coverage) + "\n")
        #if not dataset_ID in dataset_files:
        #    datasetFilename = get_dataset_filename(output_dir, dataset_ID)
        #    #dataset_files[dataset_ID] = gzip.open(datasetFilename, "wt")

        
        #simlord_command = "simlord  --min-readlength 20000 --max-readlength 25000 --max-passes 10000 -pi 0.0066 -pd 0.00366 -ps 0.0013 --read-reference " + fields[2] + " --no-sam   --coverage " + str(coverage) + " ~/test.fastq"# + output_filename #-pi 0.1 -pd 0.8 -ps 0.1 
        #pass_command = simulation_software_filename + " -list percentage.txt -index index -m pacbio_sequel -c sim.config -r 1000 -t 4 -o " + output_filename
        #print(simlord_command)
        #os.system(simlord_command)
        if readType == "short":
            simulate_shortReads(genome_filename, coverage, datasetFilename, datasetFilenameTmp, dataset_ID, strainID)
        elif readType == "long":
            simulate_longReads(simulation_software_dir, genome_filename, coverage, datasetFilename, datasetFilenameTmp, errorRate, dataset_ID, strainID)

        #break

    #for output_fastq_file in dataset_files.values():
    #    output_fastq_file.close()
    file_abundanceProfile.close()
    file_abundanceProfile_new.close()
    
    shutil.rmtree(simulation_dir)
    #nbReads = 0
    #for rec in SeqIO.parse(get_dataset_filename(0), "fastq"):
    #    nbReads += 1
    #print("Total nb reads: ", nbReads)


def remove_tmp_simulation_files():

    for pbsim_filename in glob.glob(os.path.join("sd*")):
        os.remove(pbsim_filename)


def simulate_longReads(simulation_software_dir, genome_filename, coverage, outputFilename, outputFilenameTmp, errorRate, datasetID, strainID):
    if coverage == 0: return

    outputFilenameTmpMemo = outputFilenameTmp

    if os.path.exists(outputFilenameTmp + "_0001.fastq"): os.remove(outputFilenameTmp + "_0001.fastq")
    if os.path.exists(outputFilenameTmp + "_0001.maf"): os.remove(outputFilenameTmp + "_0001.maf")
    if os.path.exists(outputFilenameTmp + "_0001.ref"): os.remove(outputFilenameTmp + "_0001.ref")
    if os.path.exists(outputFilenameTmp + ".gz"): os.remove(outputFilenameTmp + ".gz")

    #nb_reads = 0
    #read_size = 20000

    #badread_command = "badread simulate --reference " + genome_filename + " --error_model pacbio2016 --qscore_model pacbio2016 --identity 100,100,0 --length 20000,1000 --quantity " + str(coverage) + "x > " + output_fastq_filename  #+ " | gzip > " + output_filename + ".fastq.gz"
    #ret = os.system(badread_command)
    #if ret != 0: sys.exit(ret)

    #--length-min 18000 --length-mean 20000 --length-max 22000 --accuracy-mean 0.999 --accuracy-min 0.99
    #stat_filename = output_fastq_filename.split(".")[0] + "_" + get_genome_name(genome_filename) + ".csv"
    command = simulation_software_dir + "/src/pbsim --prefix " + outputFilenameTmp + " --depth " + str(coverage) + " --data-type CLR --accuracy-mean " + str(errorRate) + " --accuracy-min " + str(errorRate) + " --length-min 4000 --length-mean 9000 --length-max 16000 --model_qc " + simulation_software_dir + "/data/model_qc_ccs "  + " --header-prefix " + "D" + str(datasetID) + "_S" + str(strainID) + "_" + " " + genome_filename #+ " --stats-file " + stat_filename
    print(command)
    ret = os.system(command) # + " > /dev/null 2>&1")
    if ret != 0: sys.exit(ret)

    outputFilenameTmp += "_0001.fastq"

    command = "pigz -f -p 4 " + outputFilenameTmp
    print(command)
    ret = os.system(command + " > /dev/null 2>&1")
    if ret != 0: sys.exit(ret)

    outputFilenameTmp += ".gz"

    f1 = open(outputFilename, 'ab+')
    f2 = open(outputFilenameTmp, 'rb')
    f1.write(f2.read())
    f1.close()
    f2.close()

    if os.path.exists(outputFilenameTmpMemo + "_0001.fastq"): os.remove(outputFilenameTmpMemo + "_0001.fastq")
    if os.path.exists(outputFilenameTmpMemo + "_0001.maf"): os.remove(outputFilenameTmpMemo + "_0001.maf")
    if os.path.exists(outputFilenameTmpMemo + "_0001.ref"): os.remove(outputFilenameTmpMemo + "_0001.ref")
    if os.path.exists(outputFilenameTmpMemo + "_0001.fastq.gz"): os.remove(outputFilenameTmpMemo + "_0001.fastq.gz")



    #remove_tmp_simulation_files()
    """
    for pbsim_filename in glob.glob(os.path.join("sd*.fastq")):
        #print(pbsim_filename)
        result_file = open(pbsim_filename)
        for read in SeqIO.parse(result_file, "fastq"):
            read.id = readHeaderPrefix + "_" + str(uniq_read_id)
            #if nb_reads ==0: print(read.id)
            SeqIO.write(read, output_fastq_file, "fastq")
            nb_reads += 1
            uniq_read_id += 1
        result_file.close()

    remove_tmp_simulation_files("")

    print(nb_reads)

    return uniq_read_id
    """

def simulate_shortReads(genome_filename, coverage, outputFilename, outputFilenameTmp, datasetID, strainID):
    if coverage == 0: return

    command = "art_illumina -m 200 -s 10 -p -ss HSXt -i " + genome_filename + " --noALN -l 150 -f " + str(coverage) + " -o " + outputFilenameTmp + " -d " + "D" + str(datasetID) + "_S" + str(strainID) + "_"
    print(command)
    ret = os.system(command + " > /dev/null 2>&1")
    if ret != 0: sys.exit(ret)

    outputFilenameBase = os.path.splitext(os.path.splitext(outputFilename)[0])[0]

    for paired in [1, 2]:
        outputFilenameTmp2 = outputFilenameTmp
        outputFilenameTmp2 += str(paired) + ".fq"

        command = "pigz -f -p 4 " + outputFilenameTmp2
        print(command)
        ret = os.system(command + " > /dev/null 2>&1")
        if ret != 0: sys.exit(ret)

        outputFilenameTmp2 += ".gz"

        outputFilenamePaired = outputFilenameBase + "_" + str(paired) + ".fastq.gz"
        f1 = open(outputFilenamePaired, 'ab+')
        f2 = open(outputFilenameTmp2, 'rb')
        f1.write(f2.read())
        f1.close()
        f2.close()

        #command = "cat " + outputFilenameTmp + " > " + outputFilename
        #print(command)
        #ret = os.system(command + " > /dev/null 2>&1")
        #if ret != 0: sys.exit(ret)



if __name__ == "__main__":
    main(sys.argv[1:])  
